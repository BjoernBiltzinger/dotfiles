#+AUTHOR: J. Michael Burgess
#+TITLE: Emacs configuration file
#+BABEL: :cache yes
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage{inconsolata}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+PROPERTY: header-args :tangle ~/dotfiles/emacs/.config/emacs/init.el

* Start up
** Initialize


#+RESULTS:
: org

#+begin_src emacs-lisp :tangle no
;; We can't tangle without org!
(require 'org)
;;(setq my_dir "/Users/jburgess/.emacs.d")

;; Open the configuration
(find-file (concat user-emacs-directory "init.org"))
;; tangle it
(org-babel-tangle)
;; load it
(load-file (concat user-emacs-directory "init.el"))
;; finally byte-compile it
(byte-compile-file (concat user-emacs-directory "init.el"))



#+end_src

#+BEGIN_SRC emacs-lisp


(defun dw/org-babel-tangle-dont-ask ()
  ;; Dynamic scoping to the rescue
  (let ((org-confirm-babel-evaluate nil))
    (org-babel-tangle)))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'dw/org-babel-tangle-dont-ask
                                              'run-at-end 'only-in-org-mode)))
#+END_SRC

#+RESULTS:
| (lambda nil (add-hook 'after-save-hook #'dw/org-babel-tangle-dont-ask 'run-at-end 'only-in-org-mode)) | org-bullets-mode | org-superstar-mode | org-tempo-setup | turn-on-flyspell | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | dw/org-mode-setup | dw/org-mode-visual-fill |

** Performance

#+begin_src emacs-lisp
;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))

;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))

#+end_src
**  Native comp
#+begin_src emacs-lisp
;; Silence compiler warnings as they can be pretty disruptive
(setq comp-async-report-warnings-errors nil)
(setq native-comp-async-report-warnings-errors nil)
#+end_src

#+RESULTS:

* Package management
** Straight
#+begin_src emacs-lisp

(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)

(setq straight-use-package-by-default t)

;; Load the helper package for commands like `straight-x-clean-unused-repos'
(require 'straight-x)


#+end_src
* System

** bug hunter
#+BEGIN_SRC emacs-lisp
(use-package bug-hunter
  :ensure t
  )
#+END_SRC

** Default parameters
#+begin_src emacs-lisp

(fset 'yes-or-no-p 'y-or-n-p)

;;(setq inhibit-splash-screen t)
(setq inhibit-startup-message t)


(setq visible-bell t)

(set-fringe-mode 5)

(dolist (mode
         '(tool-bar-mode                ; No toolbars, more room fo
           scroll-bar-mode              ; No scroll bars either
           menu-bar-mode
           tooltip-mode
           ))
  (funcall mode -1))
#+end_src

** Transparent
#+begin_src emacs-lisp

(set-frame-parameter (selected-frame) 'alpha '(85 . 85))
(add-to-list 'default-frame-alist '(alpha . (85 . 85)))
#+end_src

#+RESULTS:
: ((alpha 85 . 85) (alpha 95 . 95) (font . Fira Mono 13) (alpha 90 . 90) (left-fringe . 5) (right-fringe . 5) (vertical-scroll-bars))

** Cleanliness is Godliness
*** no littering
#+begin_src emacs-lisp
;; Change the user-emacs-directory to keep unwanted things out of ~/.emacs.d
(setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
      url-history-file (expand-file-name "url/history" user-emacs-directory))

;; Use no-littering to automatically set common paths to the new user-emacs-directory
(use-package no-littering)

;; Keep customization settings in a temporary file (thanks Ambrevar!)
(setq custom-file
      (if (boundp 'server-socket-dir)
          (expand-file-name "custom.el" server-socket-dir)
        (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
(load custom-file t)
#+end_src
*** auto saves
#+begin_src emacs-lisp
(defvar user-temporary-file-directory
  "~/.emacs-autosaves/")

(make-directory user-temporary-file-directory t)
(setq backup-by-copying t)
(setq backup-directory-alist
      `(("." . ,user-temporary-file-directory)
        (tramp-file-name-regexp nil)))
(setq auto-save-list-file-prefix
      (concat user-temporary-file-directory ".auto-saves-"))
(setq auto-save-file-name-transforms
      `((".*" ,user-temporary-file-directory t)))


#+end_src
*** tidy function

#+begin_src emacs-lisp
(defun tidy ()
  "Ident, untabify and unwhitespacify current buffer, or region if active."
  (interactive)
  (let ((beg (if (region-active-p) (region-beginning) (point-min)))
        (end (if (region-active-p) (region-end) (point-max))))
    (indent-region beg end)
    (whitespace-cleanup)
    (untabify beg (if (< end (point-max)) end (point-max)))))

#+end_src
*** whitespace
#+begin_src emacs-lisp
(use-package ws-butler
  :hook ((text-mode . ws-butler-mode)
         (prog-mode . ws-butler-mode)))
#+end_src
** kill buffers
#+begin_src emacs-lisp
(defun kill-this-buffer-unless-scratch ()
  "Works like `kill-this-buffer' unless the current buffer is the
,*scratch* buffer. In witch case the buffer content is deleted and
the buffer is buried."
  (interactive)
  (if (not (string= (buffer-name) "*scratch*"))
      (kill-this-buffer)
    (delete-region (point-min) (point-max))
    (switch-to-buffer (other-buffer))
    (bury-buffer "*scratch*")))

#+end_src
** Mac OS X utilities
#+begin_src emacs-lisp
(if (eq system-type 'darwin)
    (defun copy-from-osx ()
      (shell-command-to-string "pbpaste"))

  (defun paste-to-osx (text &optional push)
    (let ((process-connection-type nil))
      (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
        (process-send-string proc text)
        (process-send-eof proc))))

  (setq interprogram-cut-function 'paste-to-osx)
  (setq interprogram-paste-function 'copy-from-osx)
  )


;; set keys for Apple keyboard, for emacs in OS X
(setq mac-command-modifier 'super) ; make cmd key do Meta
(setq ns-function-modifier 'hyper)  ; make Fn key do Hyper

#+end_src
** Coding system
#+begin_src emacs-lisp
(set-default-coding-systems 'utf-8)
#+end_src
** Silence bullshit
#+begin_src emacs-lisp
(setq large-file-warning-threshold nil)
(setq vc-follow-symlinks t)
(setq ad-redefinition-action 'accept)
#+end_src

#+RESULTS:
: accept

** scrolling and sublime
#+begin_src emacs-lisp
;; Minimap
(use-package sublimity
  :ensure t
  :config (require 'sublimity)
  (require 'sublimity-scroll)
  (setq sublimity-scroll-weight 7
        sublimity-scroll-drift-length 1)
                                        ;  (require 'sublimity-map)
  (sublimity-mode 1))
                                        ;  (sublimity-map-set-delay 3))
#+end_src

#+RESULTS:
: t

** File saving
#+begin_src emacs-lisp
;; (use-package super-save
;;   :defer 1
;;   :diminish super-save-mode
;;   :config
;;   (super-save-mode +1)
;;   (setq super-save-auto-save-when-idle t))


;; Revert Dired and other buffers
(setq global-auto-revert-non-file-buffers t)

;; Revert buffers when the underlying file has changed
(global-auto-revert-mode 1)

#+end_src
** TRAMP
#+begin_src emacs-lisp
;; Set default connection mode to SSH
(setq tramp-default-method "ssh")

#+end_src
* Keyboard
** ESC Cancels
#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src
** which key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.7))
#+END_SRC
** HYDRA
#+begin_src emacs-lisp

(use-package hydra
  :ensure t
  :defer 1)


(defun vl/window-half-height (&optional window)
  (max 1 (/ (1- (window-height window)) 2)))

(defun vl/scroll-down-half-other-window ()
  (interactive)
  (scroll-other-window
   (vl/window-half-height (other-window-for-scrolling))))
(defun vl/scroll-up-half-other-window ()
  (interactive)
  (scroll-other-window-down
   (vl/window-half-height (other-window-for-scrolling))))


(defhydra vl/hydra-scroll-other-window
  (:base-map (make-sparse-keymap))
  "Scroll the *other* window."
  ("d" vl/scroll-down-half-other-window "down")
  ("v" vl/scroll-down-half-other-window "down")
  ("u" vl/scroll-up-half-other-window "up")
  ("V" vl/scroll-up-half-other-window "up"))






(defhydra hydra-folding (:color red)
  "
  _o_pen node    _n_ext fold       toggle _f_orward  _s_how current only
  _c_lose node   _p_revious fold   toggle _a_ll
  "
  ("o" origami-open-node)
  ("c" origami-close-node)
  ("n" origami-next-fold)
  ("p" origami-previous-fold)
  ("f" origami-forward-toggle-node)
  ("a" origami-toggle-all-nodes)
  ("s" origami-show-only-node))


(defhydra hydra-index (:color blue)
  ("a" hydra-music/body "apple music")
  ("s" hydra-smartparens/body "smartparens")
  ("m" hydra-mc/body "multiple-cursors")
  ("r" hydra-rectangle/body "rectangles")
  ("e" hydra-lsp/body "editing")
  ;;("f" tkn/find-favourite "favourite")

  )

(defhydra hydra-rectangle (:color blue)
  "rectangles"
  ("s" string-rectange "string")
  ("i" string-insert-rectangle "string insert"))

(defhydra hydra-smartparens (:color green)
  "smartparens"
  ("f" sp-forward-sexp "forward")
  ("d" sp-backward-sexp "back")
  ("(" sp-wrap-round "wrap round")
  ("{" sp-wrap-curly "wrap brace")
  ("[" sp-wrap-square "wrap square")
  ("u" sp-unwrap-sexp "unwrap")
  ("s" sp-forward-slurp-sexp "forward slurp")
  ("S" sp-backward-slurp-sexp "backward slurp")
  ("b" sp-forward-barf-sexp "forward barf")
  ("B" sp-backward-barf-sexp "backward barf")
  ("k" sp-kill-sexp "kill")
  ("K" sp-backward-kill-sexp "backward kill"))


(defhydra hydra-lsp (:color blue)
  "lsp"
  ("d" lsp-find-definition "find definition")
  ("i" lsp-find-implementation "find implementation")
  ("r" lsp-find-references "find references"))

(defhydra hydra-music (:color red :timeout 4)
  "music"
  ("n" #'musica-play-next "next")
  ("p" #'musica-play-previous "previous")
  ("r" #'musica-play-next-random "next random")
  ("s" #'musica-search "search")
  ("SPC" #'musica-play-pause "play-pause")
  ("i" #'musica-info "info")
  )

(defhydra hydra-mc (:color red)
  "multiple cursors"
  ("e" mc/edit-lines "edit lines" :color blue)
  ("a" mc/mark-all-like-this "mark all")
  ("n" mc/mark-next-like-this "mark next")
  ("N" mc/unmark-next-like-this "unmark next")
  ("p" mc/mark-previous-like-this "mark previous")
  ("P" mc/unmark-previous-like-this "unmark previous")
  ("sn" mc/skip-to-next-like-this "skip to next")
  ("sp" mc/skip-to-previous-like-this "skip to prev")
  )


(defhydra hydra-smerge (:color pink
                               :hint nil
                               :pre (smerge-mode 1)
                               ;; Disable `smerge-mode' when quitting hydra if
                               ;; no merge conflicts remain.
                               :post (smerge-auto-leave))
  "
^Move^       ^Keep^               ^Diff^                 ^Other^
^^-----------^^-------------------^^---------------------^^-------
_n_ext       _b_ase               _<_: upper/base        _C_ombine
_p_rev       _u_pper (mine)       _=_: upper/lower       _r_esolve
^^           _l_ower              _>_: base/lower        _k_ill current
^^           _a_ll                _R_efine
^^           _RET_: current       _E_diff
"
  ("n" smerge-next)
  ("p" smerge-prev)
  ("b" smerge-keep-base)
  ("u" smerge-keep-upper)
  ("l" smerge-keep-lower)
  ("a" smerge-keep-all)
  ("RET" smerge-keep-current)
  ("\C-m" smerge-keep-current)
  ("<" smerge-diff-base-upper)
  ("=" smerge-diff-upper-lower)
  (">" smerge-diff-base-lower)
  ("R" smerge-refine)
  ("E" smerge-ediff)
  ("C" smerge-combine-with-next)
  ("r" smerge-resolve)
  ("k" smerge-kill-current)
  ("q" nil "cancel" :color blue))

#+end_src

#+RESULTS:
: hydra-smerge/body
** General Key maps

#+BEGIN_SRC emacs-lisp

(use-package crux
  :ensure t
  )




(use-package general
  :ensure t
  :config
  (general-define-key
   ;;"M-x" 'counsel-M-x
   ;;"C-s" 'swiper
   "C-M-y" 'consult-yank-from-kill-ring
   "M-y" 'consult-yank-pop
   "M-g M-g" 'consult-goto-line
   "M-s" 'isearch-forward
   "C->" 'hydra-mc/body
   "C-<backspace>" 'crux-kill-line-backwards
   [remap move-beginning-of-line] 'crux-move-beginning-of-line
   [remap kill-whole-line] 'crux-kill-whole-line
   [(shift return)] 'crux-smart-open-line

   "C-M-v" 'vl/hydra-scroll-other-window/body

   "M-j" (lambda () (interactive)
           (join-line -1))


   )

  ;; Cc
  (general-define-key
   :prefix "C-c"
   "c" 'org-capture
   "p" 'hydra-smartparens/body
   "l" 'org-store-link
   "m" 'hydra-music/body
   "s" 'ispell-word
   "z" 'hydra-index/body
   "g" 'consult-git-grep
   ;;"r" '(ivy-resume :which-key "ivy resume")
   "i" '((lambda () (interactive) (find-file (expand-file-name "~/dotfiles/emacs/.config/emacs/init.org"))) :which-key "edit config")
   "o" '((lambda () (interactive) (find-file "~/org")) :which-key "notes")
   "t" 'consult-theme
   "<up>" 'windmove-up
   "<down>" 'windmove-down
   "<left>" 'windmove-left
   "<right>" 'windmove-right

   )
  ;; Cx
  (general-define-key
   :prefix "C-x"
   "b" 'consult-buffer
   "m" 'magit-status
   "a" 'ace-jump-mode
   "C-b" 'ibuffer
   "k" 'kill-this-buffer-unless-scratch
   "w" 'elfeed
   )
  ;; ( general-def python-mode-map
  ;;   "C-c f" 'py-yapf-buffer

  ;;   )

  (general-def lsp-mode-map
    "C-c f" 'lsp-format-buffer


    )
  ;; Swiper
  ;; (general-def swiper-map
  ;;   "M-%" 'swiper-query-replace
  ;;   )

  (general-def projectile-mode-map
    "s-p" 'projectile-command-map

    )


  )



#+END_SRC

#+RESULTS:
: t

* Visual
** Theme
*** doom themes

#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :defer t
  :init

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config)
  (doom-themes-neotree-config)

  )

#+end_src

*** other themes
#+begin_src emacs-lisp
(use-package tron-legacy-theme
  :ensure t
  :defer t
  :config
  (setq tron-legacy-theme-vivid-cursor t)
  (setq tron-legacy-theme-dark-fg-bright-comments nil)
  (setq tron-legacy-theme-softer-bg t)
  )

;; Or if you have use-package installed
(use-package kaolin-themes
  :ensure t
  :defer t
  :config
  )

(use-package rebecca-theme
  :ensure t
  :defer t
  :config
  )

(use-package blueballs-dark-theme
  :straight
  (:host github :repo "blueballs-theme/blueballs-emacs" :branch "master" :files ("*.el"))
  )

(use-package brilliance-dull-theme
  :straight
  (:host github :repo "bizzyman/brilliance-dull-theme-emacs" :branch "master" :files ("*.el"))
  )


(use-package omni-theme
  :straight
  (:host github :repo "getomni/emacs" :branch "main" :files ("*.el"))
  )


#+end_src
*** Load the primary theme
#+begin_src emacs-lisp
(load-theme 'brilliance-dull t)
#+end_src
** Line numbers
#+begin_src emacs-lisp
(require 'display-line-numbers)
(defcustom display-line-numbers-exempt-modes '(vterm-mode eshell-mode shell-mode term-mode org-mode ansi-term-mode)
  "Major modes on which to disable the linum mode, exempts them from global requirement"
  :group 'display-line-numbers
  :type 'list
  :version "green")

(defun display-line-numbers--turn-on ()
  "turn on line numbers but excempting certain majore modes defined in `display-line-numbers-exempt-modes'"
  (if (and
       (not (member major-mode display-line-numbers-exempt-modes))
       (not (minibufferp)))
      (display-line-numbers-mode)))

(global-display-line-numbers-mode)

(column-number-mode)
#+end_src

#+RESULTS:
: t

** Font
*** Set the font
#+begin_src emacs-lisp
;; Set the font face based on platform




(add-to-list 'default-frame-alist
             '(font . "Fira Mono 13"))


;; (add-to-list 'default-frame-alist
;;              '(font . "JetBrains Mono 13"))

;; (add-to-list 'default-frame-alist
;;              '(font . "Iosevka Aile 13"))


(set-frame-font "Fira Mono 13" nil t)

(set-face-attribute 'default nil :font "Fira Mono 13"
                    ;;:height 170
                    )

;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil
                    :font "JetBrains Mono 13"
                    :weight 'light)


;; Set the variable pitch face
(set-face-attribute 'variable-pitch nil
                    ;; :font "Cantarell"
                    :font "Iosevka Aile 13"
                    :weight 'light)
#+end_src

#+RESULTS:

*** preserve font

#+begin_src emacs-lisp
(defun preserve-font ( &rest args)

  (set-frame-font "Fira Mono 13" nil t)


  (set-face-attribute 'default nil :font "Fira Mono 13"
                      ;;:height 170
                      )

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil
                      :font "JetBrains Mono 13"
                      :weight 'light)


  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil

                      :font "Iosevka Aile 13"
                      :weight 'light)



  (set-face-attribute 'org-document-title nil :font "Iosevka Aile" :weight 'bold :height 1.3)
  (dolist (face '((org-level-1 . 1.5)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Iosevka Aile" :weight 'regular :height (cdr face)))

  ;; Make sure org-indent face is available
  ;;    (require 'org-indent)

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)


  )

(advice-add 'consult-theme :after 'preserve-font)

(provide 'advice)


#+end_src
#+RESULTS:
: advice

*** emojii
#+begin_src emacs-lisp
(use-package emojify
  :init
  (global-emojify-mode))
#+end_src

#+RESULTS:

** Mode line
*** Basic properties
#+begin_src emacs-lisp
(setq display-time-format "%l:%M %p %b %y"
      display-time-default-load-average nil)

#+end_src
*** Diminsh
#+begin_src emacs-lisp
(use-package diminish
  :ensure t
  )


(diminish 'rainbow-mode)
(diminish 'auto-fill-mode)
(diminish 'abbrev-mode)
(diminish 'auto-revert-mode)
(diminish 'yas-mode)
(diminish 'yas-global-mode)

;; (diminish 'sphinx-doc-mode)
(diminish 'which-key-mode)
(diminish 'global-eldoc-mode)
(diminish 'global-font-lock-mode)
(diminish 'highlight-indent-guides-mode)
(diminish 'elpy-mode)
(diminish 'abbrev-mode)
(diminish 'flyspell-mode)
                                        ;(diminish 'flycheck-mode)
(diminish 'font-lock-mode)


#+end_src

#+RESULTS:

*** Doom mode line
#+begin_src emacs-lisp
;; You must run (all-the-icons-install-fonts) one time after
;; installing this package!

(use-package minions
  :hook (doom-modeline-mode . minions-mode))

(use-package doom-modeline
  ;;:after eshell     ;; Make sure it gets hooked after eshell
  :hook (after-init . doom-modeline-init)
  :custom-face
  (mode-line ((t (:height 0.85))))
  (mode-line-inactive ((t (:height 0.85))))
  :custom
  (doom-modeline-height 15)
  (doom-modeline-bar-width 6)
  (doom-modeline-lsp t)
  (doom-modeline-mu4e nil)
  (doom-modeline-irc nil)
  (doom-modeline-persp-name nil)
  (doom-modeline-buffer-file-name-style 'truncate-except-project)
  ;;  (doom-modeline-buffer-file-name-style 'auto)
  (doom-modeline-major-mode-icon nil)
  (doom-modeline-hud t)
  (doom-modeline-icon t)
  (doom-modeline-major-mode-icon t)
  (doom-modeline-window-width-limit fill-column)
  (doom-modeline-project-detection 'projectile)
  (doom-modeline-buffer-encoding nil)
  (auto-revert-check-vc-info t)
  (doom-modeline-major-mode-color-icon t)
  (doom-modeline-buffer-state-icon t)
  (doom-modeline-buffer-modification-icon t)
  (doom-modeline-minor-modes nil)
  (doom-modeline-enable-word-count nil)
  (doom-modeline-checker-simple-format nil)
  (doom-modeline-vcs-max-length 20)
  (doom-modeline-github t)
  (doom-modeline-github-interval (* 30 60))
  (doom-modeline-env-version nil)
  (doom-modeline-env-enable-python t)
  (doom-modeline-env-enable-ruby nil)
  (doom-modeline-env-python-executable "python")
  )





#+end_src

#+RESULTS:
| doom-modeline-init | org-persist-read-all | ivy-mode | all-the-icons-ivy-setup | global-company-mode | tramp-register-archive-file-name-handler | magit-maybe-define-global-key-bindings | table--make-cell-map |

** all the icons

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :if (display-graphic-p)
  :ensure t
  :config
  (when (not (member "all-the-icons" (font-family-list)))
    (all-the-icons-install-fonts t)))

;; (setq
;;  all-the-icons-mode-icon-alist
;;  `(,@all-the-icons-mode-icon-alist
;;    (telega-chat-mode all-the-icons-fileicon "telegram" :v-adjust 0.0
;;                      :face all-the-icons-blue-alt)
;;    (telega-root-mode all-the-icons-material "contacts" :v-adjust 0.0)))

;; (use-package all-the-icons-ibuffer
;;   :ensure t
;;   :init (all-the-icons-ibuffer-mode 1))



#+END_SRC

#+RESULTS:
: t

** Beacon

Some nice visual modes
#+BEGIN_SRC emacs-lisp

(use-package beacon
  :ensure t
  :config

  (progn

    (setq beacon-color "#00FCB7")
    (setq beacon-push-mark 60)

    (setq beacon-blink-when-point-moves-vertically nil) ; default nil
    (setq beacon-blink-when-point-moves-horizontally nil) ; default nil
    (setq beacon-blink-when-buffer-changes t) ; default t
    (setq beacon-blink-when-window-scrolls t) ; default t
    (setq beacon-blink-when-window-changes t) ; default t
    (setq beacon-blink-when-focused nil) ; default nil

    (setq beacon-blink-duration 0.7) ; default 0.3
    (setq beacon-blink-delay 0.1) ; default 0.3
    (setq beacon-size 40) ; default 40

    (add-to-list 'beacon-dont-blink-major-modes 'term-mode)

    (beacon-mode 1)))
#+END_SRC

* Completion
** Preserve Minibuffer History with savehist-mode
#+begin_src emacs-lisp
(use-package savehist
  :config
  (setq history-length 25)
  (savehist-mode 1))


;; (use-package prescient
;;   :ensure t
;;   :config
;;   (setq prescient-history-length 200)
;;   (setq prescient-save-file "~/.config/emacs/prescient-items")
;;   (setq prescient-filter-method '(literal regexp))
;;   (prescient-persist-mode 1)

;;   )

;; (use-package ivy-prescient

;;   :ensure t
;;   :after (prescient ivy)
;;   :config
;;   (setq ivy-prescient-sort-commands
;;         '(:not counsel-grep
;;                counsel-rg
;;                counsel-switch-buffer
;;                ivy-switch-buffer
;;                swiper
;;                swiper-multi))
;;   (setq ivy-prescient-retain-classic-highlighting t)
;;   (setq ivy-prescient-enable-filtering nil)
;;   (setq ivy-prescient-enable-sorting t)
;;   (ivy-prescient-mode 1))

;; Individual history elements can be configured separately
;;(put 'minibuffer-history 'history-length 25)
;;(put 'evil-ex-history 'history-length 50)
;;(put 'kill-ring 'history-length 25))
#+end_src

#+RESULTS:
: t

** Vertico
#+begin_src emacs-lisp
(defun dw/minibuffer-backward-kill (arg)
  "When minibuffer is completing a file name delete up to parent
folder, otherwise delete a word"
  (interactive "p")
  (if minibuffer-completing-file-name
      ;; Borrowed from https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608
      (if (string-match-p "/." (minibuffer-contents))
          (zap-up-to-char (- arg) ?/)
        (delete-minibuffer-contents))
    (backward-kill-word arg)))

(use-package vertico
  :straight '(vertico :host github
                      :repo "minad/vertico"
                      :branch "main")
  :bind (:map vertico-map
              ("C-j" . vertico-next)
              ("C-k" . vertico-previous)
              ("C-f" . vertico-exit)
              :map minibuffer-local-map
              ("M-h" . dw/minibuffer-backward-kill))
  :custom
  (vertico-cycle t)
  :custom-face
  (vertico-current ((t (:background "#880833"))))
  :init
  (vertico-mode))
#+end_src

#+RESULTS:
: dw/minibuffer-backward-kill

** region completion Corfu
#+begin_src emacs-lisp
(use-package corfu
  :straight '(corfu :host github
                    :repo "minad/corfu")
  :bind (:map corfu-map
              ("C-j" . corfu-next)
              ("C-k" . corfu-previous)
              ("C-f" . corfu-insert))
  :custom
  (corfu-cycle t)
  :config
  (corfu-global-mode))
#+end_src
** Orderless
#+begin_src emacs-lisp
(use-package orderless
  :straight t
  :init
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles . (partial-completion))))))
#+end_src

** consult
#+begin_src emacs-lisp
(defun dw/get-project-root ()
  (when (fboundp 'projectile-project-root)
    (projectile-project-root)))

(use-package consult
  :straight t
  :demand t
  :bind (("C-s" . consult-line)
         ("C-M-l" . consult-imenu)
         ;;("C-M-j" . persp-switch-to-buffer*)
         :map minibuffer-local-map
         ("C-r" . consult-history))
  :custom
  (consult-project-root-function #'dw/get-project-root)
  (completion-in-region-function #'consult-completion-in-region)
  :config
  ;;(consult-preview-mode)
  )
#+end_src

** marginalia
#+begin_src emacs-lisp




(use-package marginalia
  :after vertico
  :straight t
  :custom

  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light t))


  :config
  :init
  (marginalia-mode))


(use-package all-the-icons-completion
  :ensure t
  :init
  (all-the-icons-completion-mode)
  :hook
  (marginalia-mode-hook . all-the-icons-completion-marginalia-setup))



#+end_src

#+RESULTS:
| all-the-icons-completion-marginalia-setup |

** embark
#+begin_src emacs-lisp
(use-package embark
  :straight t
  :bind (("C-." . embark-act)
         :map minibuffer-local-map
         ("C-." . embark-act))
  :config

  ;; ;; Show Embark actions via which-key
  ;; (setq embark-action-indicator
  ;;       (lambda (map)
  ;;         (which-key--show-keymap "Embark" map nil nil 'no-paging)
  ;;         #'which-key--hide-popup-ignore-command)
  ;;       embark-become-indicator embark-action-indicator)


  )
#+end_src

* Window Management
** ace window
#+begin_src emacs-lisp
(use-package ace-window
  :bind (("M-o" . ace-window))
  :custom
  (aw-scope 'frame)
  (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
  (aw-minibuffer-flag t)
  :config
  (ace-window-display-mode 1))

#+end_src
** winner

#+begin_src emacs-lisp
;; (use-package winner

;;   :config
;;   (winner-mode)
;;   (setq  winner-dont-bind-my-keys t)

;;   )
#+end_src

** fill
#+begin_src emacs-lisp

(defun dw/org-mode-visual-fill ()
  (setq visual-fill-column-width 110
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))


(use-package visual-fill-column
  :defer t
  :hook (org-mode . dw/org-mode-visual-fill))
#+end_src

** acejump
#+begin_src emacs-lisp
(use-package ace-jump-mode
  :ensure t)

#+end_src
* File browsing
** dired
#+begin_src emacs-lisp
(use-package all-the-icons-dired)

(use-package dired
  :ensure nil
  :straight nil
  :defer 1
  :commands (dired dired-jump)
  :config
  (setq dired-listing-switches "-agho --group-directories-first"
        dired-omit-files "^\\.[^.].*"
        dired-omit-verbose nil
        dired-hide-details-hide-symlink-targets nil
        delete-by-moving-to-trash t)



  (setq dired-use-ls-dired nil)
  ( require 'ls-lisp)
  (setq ls-lisp-use-insert-directory-program nil)
  (autoload 'dired-omit-mode "dired-x")

  (add-hook 'dired-load-hook
            (lambda ()
              (interactive)
              (dired-collapse)))

  (add-hook 'dired-mode-hook
            (lambda ()
              (interactive)
              (dired-omit-mode 1)
              (dired-hide-details-mode 1)
              (all-the-icons-dired-mode 1)
              (hl-line-mode 1))))

(use-package dired-rainbow
  :defer 2
  :config
  (dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
  (dired-rainbow-define html "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
  (dired-rainbow-define xml "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
  (dired-rainbow-define document "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
  (dired-rainbow-define markdown "#ffed4a" ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
  (dired-rainbow-define database "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
  (dired-rainbow-define media "#de751f" ("mp3" "mp4" "mkv" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac"))
  (dired-rainbow-define image "#f66d9b" ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg"))
  (dired-rainbow-define log "#c17d11" ("log"))
  (dired-rainbow-define shell "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
  (dired-rainbow-define interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
  (dired-rainbow-define compiled "#4dc0b5" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
  (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
  (dired-rainbow-define compressed "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
  (dired-rainbow-define packaged "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
  (dired-rainbow-define encrypted "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
  (dired-rainbow-define fonts "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
  (dired-rainbow-define partition "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
  (dired-rainbow-define vc "#0074d9" ("git" "gitignore" "gitattributes" "gitmodules"))
  (dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*"))

(use-package dired-single
  :defer t)

(use-package dired-ranger
  :defer t)

(use-package dired-collapse
  :defer t)
#+end_src

#+RESULTS:

* Org

*** Basic org up
#+BEGIN_SRC emacs-lisp
(setq-default fill-column 80)
;; Turn on indentation and auto-fill mode for Org files
(defun dw/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 1)
  (auto-fill-mode 1)
  (visual-line-mode 1)
  (diminish org-indent-mode)

  )

(use-package org
                                        ;  :defer t
  :hook (org-mode . dw/org-mode-setup)
  :config
  (setq org-ellipsis " ▾"
        org-hide-emphasis-markers t
        org-src-fontify-natively t
        org-src-tab-acts-natively t
        org-edit-src-content-indentation 2
        org-hide-block-startup nil
        org-src-preserve-indentation nil
        org-startup-folded 'content
        org-cycle-separator-lines 2)

  (setq org-refile-targets '((nil :maxlevel . 2)
                             (org-agenda-files :maxlevel . 2)))

  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-use-outline-path t)

  (setq org-directory "~/org")
  (setq org-agenda-files (list "~/org/"))
  (setq org-default-notes-file "~/org/notes.org")
  (setq org-agenda-file-regexp "\\`[^.].*\\.org\\|.todo\\'")

  (setq org-todo-keywords
        '((sequence "TODO" "READ" "RESEARCH" "|" "DONE" "DELEGATED" )))



  (setq org-default-notes-file (concat org-directory "notes.org"))      ;; some sexier setup

  (setq org-hide-emphasis-markers t)

  ;; (font-lock-add-keywords 'org-mode
  ;;                         '(("^ *\\([-]\\) "
  ;;                            (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  (add-hook 'org-mode-hook 'turn-on-flyspell)
  (setq org-fontify-done-headline t)


  (setq org-todo-keyword-faces
        '(("TODO" . org-warning) ("READ" . "yellow") ("RESEARCH" . (:foreground "blue" :weight bold))
          ("CANCELED" . (:foreground "pink" :weight bold))
          ("WRITING" . (:foreground "red" :weight bold))
          ("RECIEVED" . (:foreground "red" :background "green" :weight bold))
          ("SUBMITTED" . (:foreground "blue"))
          ("ACCEPTED" . (:foreground "green"))


          ))




  )
#+END_SRC

#+RESULTS:
| org-bullets-mode | org-tempo-setup | org-superstar-mode | turn-on-flyspell | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | dw/org-mode-setup | dw/org-mode-visual-fill | (lambda nil (add-hook 'after-save-hook #'dw/org-babel-tangle-dont-ask 'run-at-end 'only-in-org-mode)) |

*** org super star

#+BEGIN_SRC emacs-lisp

(use-package org-superstar
  :ensure t
  :after org
  :hook (org-mode . org-superstar-mode)
  :custom
  (org-superstar-remove-leading-stars t)
  (org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●"))


  )





;; Increase the size of various headings

#+end_src
#+begin_src emacs-lisp


;; We can't tangle without org!
(require 'org)


(set-face-attribute 'org-document-title nil :font "Iosevka Aile" :weight 'bold :height 1.3)
(dolist (face '((org-level-1 . 1.2)
                (org-level-2 . 1.1)
                (org-level-3 . 1.05)
                (org-level-4 . 1.0)
                (org-level-5 . 1.1)
                (org-level-6 . 1.1)
                (org-level-7 . 1.1)
                (org-level-8 . 1.1)))
  (set-face-attribute (car face) nil :font "Iosevka Aile" :weight 'medium :height (cdr face))
  )


;; Make sure org-indent face is available
(require 'org-indent)

;; Ensure that anything that should be fixed-pitch in Org files appears that way
(set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
(set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
(set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
(set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
(set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)




;; Get rid of the background on column views
(set-face-attribute 'org-column nil :background nil)
(set-face-attribute 'org-column-title nil :background nil)






#+end_src
#+RESULTS:

*** org tempo

#+BEGIN_SRC emacs-lisp
(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("sh" . "src sh"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
(add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
(add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
(add-to-list 'org-structure-template-alist '("json" . "src json"))
#+END_SRC
*** org bullets

#+begin_src emacs-lisp

(use-package org-bullets
  :ensure t
  :after org
  :commands org-bullets-mode
  :init
  (add-hook 'org-mode-hook 'org-bullets-mode)
  )



                                        ;(define-key global-map "\C-cc" 'org-capture)

#+end_src
*** org journal

#+begin_src emacs-lisp
(use-package org-journal
  :ensure t
  :defer t
  :init
  ;; Change default prefix key; needs to be set before loading org-journal
  (setq org-journal-prefix-key "C-c j ")
  (setq org-journal-file-format "%Y-%m-%d-%a")
  :config

  (defun org-journal-file-header-func (time)
    "Custom function to create journal header."
    (concat
     (pcase org-journal-file-type
       (`daily "#+TITLE: Daily Journal\n#+STARTUP: showeverything")
       (`weekly "#+TITLE: Weekly Journal\n#+STARTUP: folded")
       (`monthly "#+TITLE: Monthly Journal\n#+STARTUP: folded")
       (`yearly "#+TITLE: Yearly Journal\n#+STARTUP: folded"))))

  (setq org-journal-file-header 'org-journal-file-header-func)


  (setq org-journal-dir "~/org/journal/"
        org-journal-date-format "%A, %d/%m/%Y")

  (defun org-journal-save-entry-and-exit()
    "Simple convenience function.
  Saves the buffer of the current day's entry and kills the window
  Similar to org-capture like behavior"
    (interactive)
    (save-buffer)
    (kill-buffer-and-window))
  (define-key org-journal-mode-map (kbd "C-x C-s") 'org-journal-save-entry-and-exit)




  (defun org-journal-find-location ()
    ;; Open today's journal, but specify a non-nil prefix argument in order to
    ;; inhibit inserting the heading; org-capture will insert the heading.
    (org-journal-new-entry t)
    (unless (eq org-journal-file-type 'daily)
      (org-narrow-to-subtree))
    (goto-char (point-max)))


  )




#+end_src
*** org download

#+begin_src emacs-lisp
(use-package org-download
  :ensure t
  :after org

  :defer nil
  :custom
  (org-download-method 'directory)
  (org-download-image-dir "~/org/pictures")
  (org-download-heading-lvl nil)
  (org-download-timestamp "%Y%m%d-%H%M%S_")
  (org-image-actual-width 300)
  (org-download-screenshot-method "/usr/local/bin/pngpaste %s")
  :bind
  ("C-M-y" . org-download-screenshot)
  :config
  (require 'org-download))
#+end_src

#+RESULTS:
: org-download-screenshot

*** Capture templates


#+begin_src emacs-lisp
(setq org-capture-templates
      '(("t" "TODO" plain (function org-journal-find-location)
         "** TODO %(format-time-string org-journal-time-format)%^{Title}"
         :immediate-finish t)


        ;; ("t" "Todo" entry (file+headline "~/org/notes.org" "Task List")
        ;;  "* TODO %?\n%U" :empty-lines 1)

        ;; ("l" "Logbook entry" entry (file+datetree "logbook-work.org") "** %U - %^{Activity}_ %^G :LOG:")

        ("j" "Journal entry" plain (function org-journal-find-location)
         "** %(format-time-string org-journal-time-format)%^{Title}\n%i%?"
         :jump-to-captured t :immediate-finish t)

        ("P" "Research project" entry (file "~/org/projects.org")
         "* TODO %^{Project title} :%^G:\n:PROPERTIES:\n:CREATED: %U\n:END:\n%^{Project description}\n** TODO Literature review\n** TODO %?\n** TODO Summary\n** TODO Reports\n** Ideas\n" :clock-in t :clock-resume t)

        ("a" "Research Article" entry(file+headline "~/org/publications.org" "Working articles") "** WRITING %^{Title}\n\t-Added: %U\n   :LOGBOOK:\n   :END:\n")

        ("r" "Ref. Report" entry(file+headline "~/org/publications.org" "Referee reports") "** WRITING %^{Title}\n\t-Added: %U\n   :LOGBOOK:\n   :END:\n")

        ("c" "Coding tips" entry(file+headline "~/org/coding.org" "Refile") "** READ %^{description} %^g  \n\t-Added: %U\n   :LOGBOOK:\n   :END:\n")

                                        ;    ("C" "Cliplink capture code" entry (file+headline  "~/org/coding.org" "Refile" ) "** READ %^{description} %^g  %(org-cliplink-capture) \n\t-Added: %U\n   :LOGBOOK:\n   :END:\n" :empty-lines 1)

        ("f" "Fitting" entry(file+headline "~/org/fitting.org" "Refile") "** READ %^{description}  %^g  \n\t-Added: %U\n   :LOGBOOK:\n   :END:\n")

        ("x" "arXiv" entry(file+headline "~/org/arxiv.org" "To read") "** READ %^L %t")



        ("i" "idea" entry(file "~/org/ideas.org") "* TODO %? %t" :empty-lines 1)

                                        ;       ("F" "Cliplink capture fitting" entry (file+headline  "~/org/fitting.org" "Refile" ) "** READ %^{description} %^g  %(org-cliplink-capture) \n\t-Added: %U\n   :LOGBOOK:\n   :END:\n" :empty-lines 1)

        )
      )


;;
#+END_SRC

When editing org-files with source-blocks, we want the source blocks to
be themed as they would in their native mode.

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-confirm-babel-evaluate nil
      org-edit-src-content-indentation 0)
#+END_SRC

This is quite an ugly fix for allowing code markup for expressions like
="this string"=, because the quotation marks causes problems.

#+BEGIN_SRC emacs-lisp
;;(require 'org)
(eval-after-load "org"
  '(progn
     (setcar (nthcdr 2 org-emphasis-regexp-components) " \t\n,")
     (custom-set-variables `(org-emphasis-alist ',org-emphasis-alist))))
#+END_SRC

*** ROAM

#+begin_src emacs-lisp


(use-package org-roam
  :ensure t
  :init
  (setq org-roam-v2-ack t)
  (setq org-roam-dailies-directory "journal/")
  :custom
  (org-roam-directory "~/Documents/roam")

  (org-roam-completion-everywhere t)

  (org-roam-capture-templates
   '(("d" "default" plain "%?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n")
      :unnarrowed t)
     ("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n#+filetags: project")
      :unnarrowed t)
     ("b" "brainstorm" plain "%?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n#+filetags: brainstorm")
      :unnarrowed t)
     ("m" "meeting" plain "* Topic\n\n%?\n\n* Attending\n\n* Notes\n\n ** Conclusion\n\n"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n#+filetags: project")
      :unnarrowed t)
     ("a" "article" plain "*[[${link}][${description}]]\n\n* Notes\n\n"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n#+filetags: article")
      :unnarrowed t)

     )
   )

  (org-roam-dailies-capture-templates
   '(("d" "default" entry "* %<%I:%M %p>: %?"
      :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))


  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)
         :map org-mode-map
         ("C-M-i"    . completion-at-point)
         :map org-roam-dailies-map
         ("Y" . org-roam-dailies-capture-yesterday)
         ("T" . org-roam-dailies-capture-tomorrow))
  :bind-keymap
  ("C-c n d" . org-roam-dailies-map)
  :config
  (require 'org-roam-dailies) ;; Ensure the keymap is available
                                        ;  (org-roam-db-autosync-mode)


  (org-roam-setup))





#+end_src

#+RESULTS:
: org-roam-dailies-capture-tomorrow

*** roam server
#+begin_src emacs-lisp
(use-package org-roam-ui
  :straight
  (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
  :after org-roam
  ;;    :hook
  ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
  ;;         a hookable mode anymore, you're advised to pick something yourself
  ;;         if you don't care about startup time, use
  ;;:hook (after-init . org-roam-ui-mode)
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))
#+end_src


#+RESULTS:
| org-roam-ui-mode | ivy-mode | all-the-icons-ivy-setup | global-company-mode | tramp-register-archive-file-name-handler | magit-maybe-define-global-key-bindings |

* LSP
#+begin_src emacs-lisp

(use-package lsp-pyright
  :straight (lsp-pyright :type git :host github :repo "emacs-lsp/lsp-pyright")
  :hook (python-mode . (lambda ()
                         (require 'lsp-pyright)
                         (lsp-deferred)))

  :custom
  (lsp-pyright-use-library-code-for-types t)
  (lsp-pyright-multi-root nil)
  (lsp-pyright-diagnostic-mode "workspace")
  )


;; (advice-add 'lsp :before (lambda (&rest _args) (eval '(setf (lsp-session-server-id->folders (lsp-session)) (ht)))))

(use-package lsp-mode
  :ensure t
  :commands (lsp lsp-deferred)


  :custom
  (lsp-auto-guess-root nil)
  (lsp-prefer-flymake nil) ; Use flycheck instead of flymake
  (lsp-disabled-clients '((python-mode . pyls)))

  :config
  (setq lsp-print-performance nil)
  (setq lsp-idle-delay 0.55)
  (setq lsp-enable-symbol-highlighting t)
  (setq lsp-enable-snippet t)
  (setq lsp-restart 'auto-restart)
  (setq lsp-enable-completion-at-point t)
  (setq lsp-log-io t)
  (setq lsp-enable-links nil)


  ;; (lsp-register-client
  ;;  (make-lsp-client
  ;;   :new-connection (lsp-tramp-connection (lambda ()
  ;;                                           (cons "pyright-langserver"
  ;;                                                 lsp-pyright-langserver-command-args)))
  ;;   :major-modes '(python-mode)
  ;;   :remote? t
  ;;   :server-id 'pyright-remote
  ;;   :multi-root t
  ;;   :priority 3
  ;;   :initialization-options (lambda () (ht-merge (lsp-configuration-section "pyright")
  ;;                                                (lsp-configuration-section "python")))
  ;;   :initialized-fn (lambda (workspace)
  ;;                     (with-lsp-workspace workspace
  ;;                       (lsp--set-configuration
  ;;                        (ht-merge (lsp-configuration-section "pyright")
  ;;                                  (lsp-configuration-section "python")))))
  ;;   :download-server-fn (lambda (_client callback error-callback _update?)
  ;;                         (lsp-package-ensure 'pyright callback error-callback))
  ;;   :notification-handlers (lsp-ht ("pyright/beginProgress" 'lsp-pyright--begin-progress-callback)
  ;;                                  ("pyright/reportProgress" 'lsp-pyright--report-progress-callback)
  ;;                                  ("pyright/endProgress" 'lsp-pyright--end-progress-callback))))


  :hook ((python-mode) . lsp-deferred)
  (yaml-mode . lsp)
  (LaTeX-mode . lsp)
  (latex-mode . lsp)
  (fortran-mode . lsp)
  )


(use-package treemacs)

(use-package lsp-treemacs
  :after (lsp-mode treemacs)
  )


(use-package lsp-ui
  :ensure t
  :config (setq lsp-ui-sideline-show-hover t
                lsp-ui-doc-frame-mode t
                lsp-ui-sideline-delay 3
                lsp-ui-doc-delay 3
                lsp-ui-sideline-ignore-duplicates t
                lsp-headerline-breadcrumb-icons-enable t
                lsp-ui-doc-position 'bottom
                lsp-ui-doc-alignment 'frame
                lsp-ui-doc-header nil
                lsp-ui-doc-include-signature t
                lsp-ui-doc-use-childframe t)

  :commands lsp-ui-mode
  )

;; (use-package company-lsp
;;   :ensure t
;;   :after lsp-mode
;;   :commands company-lsp
;;   :init
;;   (setq company-lsp-async t)
;;   (setq company-lsp-enable-recompletion t)
;;   (setq company-lsp-enable-snippet t )
;;   :config
;;   (push 'company-lsp company-backends))

#+end_src

* Development
** Configuration
*** Flycheck
#+BEGIN_SRC emacs-lisp

(use-package flycheck
  :ensure t
  :defer t
  :hook (lsp-mode . flycheck-mode))


#+END_SRC

*** snippets

#+BEGIN_SRC emacs-lisp

(use-package yasnippet                  ; Snippets
  :ensure t
  :hook (prog-mode . yas-minor-mode)
  :config

  (yas-reload-all)
  )
(use-package yasnippet-snippets         ; Collection of snippets
  :ensure t)

#+END_SRC

*** smart parens

#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :ensure t
  :config
                                        ;  (use-package smartparens-config)
  (require 'smartparens-config)
  (setq-default sp-escape-quotes-after-insert nil)
  (setq sp-autoinsert-pair nil
        sp-autodelete-pair nil
        sp-autodelete-closing-pair nil
        sp-autodelete-opening-pair nil
        sp-autoskip-closing-pair nil
        sp-autoskip-opening-pair nil
        sp-cancel-autoskip-on-backward-movement nil
        sp-autodelete-wrap nil
        sp-autowrap-region nil
        sp-autoinsert-quote-if-followed-by-closing-pair nil)
  :hook (prog-mode . smartparens-mode))


;; (use-package smartparens
;;   :ensure t
;;   :hook (prog-mode . smartparens-mode))
#+END_SRC

#+RESULTS:
| highlight-indent-guides-mode | rainbow-delimiters-mode | smartparens-mode | yas-minor-mode | rainbow-mode |

*** rainbow delimeters

#+BEGIN_SRC emacs-lisp

(use-package rainbow-delimiters
  :ensure t
  :hook (prog-mode . rainbow-delimiters-mode)
  )

#+END_SRC
*** highlight indent guides


#+BEGIN_SRC emacs-lisp

(defun my-highlighter (level responsive display)
  (if (> 1 level)
      nil
    (highlight-indent-guides--highlighter-default level responsive display)))



(use-package highlight-indent-guides
  :ensure t
  :init
  (setq highlight-indent-guides-auto-enabled nil)
  (setq highlight-indent-guides-method 'character)

  (setq highlight-indent-guides-responsive 'stack)
  :config


  (set-face-foreground 'highlight-indent-guides-character-face "#D103CE" )
  (set-face-foreground 'highlight-indent-guides-top-character-face "#5BFFB2")
  (set-face-foreground 'highlight-indent-guides-stack-character-face "#785390")
  (setq highlight-indent-guides-highlighter-function 'my-highlighter)

  :hook (prog-mode . highlight-indent-guides-mode)

  )

#+END_SRC

#+RESULTS:
| git-gutter-mode | highlight-indent-guides-mode | rainbow-delimiters-mode | smartparens-mode | yas-minor-mode | rainbow-mode |


#+BEGIN_SRC emacs-lisp

#+END_SRC


#+BEGIN_SRC emacs-lisp

#+END_SRC


#+BEGIN_SRC emacs-lisp

#+END_SRC

*** origami code folding
#+begin_src emacs-lisp

;; Origami code folding
(use-package origami
  :ensure t
  :commands origami-mode
  :config
  (progn
    (add-hook 'prog-mode-hook 'origami-mode)
    (with-eval-after-load 'hydra
      (define-key origami-mode-map (kbd "C-x f")
                  (defhydra hydra-folding (:color red :hint nil)
                    "
_o_pen node    _n_ext fold       toggle _f_orward    _F_ill column: %`fill-column
_c_lose node   _p_revious fold   toggle _a_ll        e_x_it
"
                    ("o" origami-open-node)
                    ("c" origami-close-node)
                    ("n" origami-next-fold)
                    ("p" origami-previous-fold)
                    ("f" origami-forward-toggle-node)
                    ("a" origami-toggle-all-nodes)
                    ("F" fill-column)
                    ("x" nil :color blue))))))


#+end_src

#+RESULTS:
*** multiple cursors

adding in [[https://github.com/magnars/multiple-cursors.el][multiple cursors]]

#+BEGIN_SRC emacs-lisp

(use-package multiple-cursors
  ;;  :disabled
  :ensure t
  :defer nil
  :config

  (setq mc/list-file "~/.config/emacs/mc-lists")

  )


#+END_SRC

#+RESULTS:
: t

*

*** Flyspell

Flyspell offers on-the-fly spell checking. We can enable flyspell for all
text-modes with this snippet.

#+BEGIN_SRC emacs-lisp



(use-package flyspell
                                        ; nil
  :commands (ispell-change-dictionary
             ispell-word
             flyspell-buffer
             flyspell-mode
             flyspell-region)
  :config
  (setq flyspell-issue-message-flag nil)
  (setq flyspell-issue-welcome-flag nil)
  (setq ispell-program-name "/usr/local/bin/ispell")
  (setq ispell-dictionary "american")
  (add-hook 'text-mode-hook 'flyspell-mode)
  )
#+END_SRC

#+RESULTS:
: t


** GIT
*** ghub
#+BEGIN_SRC emacs-lisp

(use-package ghub
  :ensure t


  )

(use-package ghub+
  :ensure t


  )


#+END_SRC

*** MAGIT
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :bind ( ("s-g" . magit-status))
  ;; :commands (magit-status magit-get-current-branch)
  ;;  :custom
  ;; (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)


  )

;; (dw/leader-key-def
;;   "g"   '(:ignore t :which-key "git")
;;   "gs"  'magit-status
;;   "gd"  'magit-diff-unstaged
;;   "gc"  'magit-branch-or-checkout
;;   "gl"   '(:ignore t :which-key "log")
;;   "glc" 'magit-log-current
;;   "glf" 'magit-log-buffer-file
;;   "gb"  'magit-branch
;;   "gP"  'magit-push-current
;;   "gp"  'magit-pull-branch
;;   "gf"  'magit-fetch
;;   "gF"  'magit-fetch-all
;;   "gr"  'magit-rebase)

(use-package git-commit
  :ensure t
  :after magit
  :config
  (setq git-commit-summary-max-length 50)
  (setq git-commit-known-pseudo-headers
        '("Signed-off-by"
          "Acked-by"
          "Modified-by"
          "Cc"
          "Suggested-by"
          "Reported-by"
          "Tested-by"
          "Reviewed-by"))
  (setq git-commit-style-convention-checks
        '(non-empty-second-line
          overlong-summary-line)))

;; (use-package magit-diff
;;                                         ; nil
;;   :after magit
;;   :config
;;   (setq magit-diff-refine-hunk t))

;; (use-package magit-repos
;;                                      ; nil
;;   :after magit
;;   :commands magit-list-repositories
;;   :config
;;   (setq magit-repository-directories
;;      '(("~/coding/projects" . 1)

;;        )))

(use-package git-timemachine
  :ensure t
  :commands git-timemachine)

(use-package forge
  :ensure t
  :after magit)

#+END_SRC

#+RESULTS:

*** magit todos
#+begin_src emacs-lisp
(use-package magit-todos
  :ensure t

  :defer t)
#+end_src
*** git gutter
#+BEGIN_SRC emacs-lisp

(use-package git-gutter
  :ensure t
  :diminish
  :hook ((text-mode . git-gutter-mode)
         (prog-mode . git-gutter-mode))
  :config
  (setq git-gutter:update-interval 2)


  ;; These characters are used in terminal mode
  (setq git-gutter:modified-sign "≡")
  (setq git-gutter:added-sign "≡")
  (setq git-gutter:deleted-sign "≡")
  (set-face-foreground 'git-gutter:added "LightGreen")
  (set-face-foreground 'git-gutter:modified "LightGoldenrod")
  (set-face-foreground 'git-gutter:deleted "LightCoral"))
#+END_SRC
** projectile
#+begin_src emacs-lisp
;; (defun dw/switch-project-action ()
;;   "Switch to a workspace with the project name and start `magit-status'."
;;   ;; TODO: Switch to EXWM workspace 1?
;;   (persp-switch (projectile-project-name))
;;   (magit-status))


(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :demand t
  ;; :bind-keymap
  ;; ("C-c p" . projectile-command-map)
  :init
  (when (file-directory-p "~/coding/projects")
    (setq projectile-project-search-path '("~/coding/projects")))
  )
#+end_src

** Languages
*** Python


I use LSP for python.

#+BEGIN_SRC emacs-lisp

(use-package blacken
  :init
  (setq-default blacken-fast-unsafe t)
  (setq-default blacken-line-length 80)
  )


(use-package pyvenv
  :ensure t
  :config
  (pyvenv-tracking-mode 1)
  (setq pyvenv-mode-line-indicator
        '(pyvenv-virtual-env-name ("[venv:" pyvenv-virtual-env-name "] ")))
  (pyvenv-mode +1)


  )


(use-package python-mode
  :hook
  (python-mode . pyvenv-mode)
                                        ;  (python-mode . flycheck-mode)
  (python-mode . company-mode)
                                        ;(python-mode . blacken-mode)
  (python-mode . yas-minor-mode)
  :custom
  ;; NOTE: Set these if Python 3 is called "python3" on your system!
  (python-shell-interpreter "python3")
  :config
  )

(use-package sphinx-doc
  :ensure t
  :hook (python-mode . sphinx-doc-mode)
  :config
  (setq sphinx-doc-include-types t)

  )

(setq python-shell-interpreter "python3"
      python-shell-interpreter-args "-i")


(defun wcx-restart-python ()

  ;; (set-variable 'ycmd-server-command `(,(executable-find "python3") ,(file-truename "~/.emacs.d/ycmd/ycmd/")))
  (pyvenv-restart-python)
  ;; (ycmd-restart-semantic-server)
  )


;; (use-package auto-virtualenvwrapper
;;   :ensure t
;;   :defer t
;;   :config
;;   (add-hook 'python-mode-hook #'auto-virtualenvwrapper-activate)
;;   (add-hook 'window-configuration-change-hook #'auto-virtualenvwrapper-activate)
;;   (add-hook 'projectile-after-switch-project-hook #'auto-virtualenvwrapper-activate)
;;   (add-hook 'pyvenv-post-activate-hooks 'wcx-restart-python)

;;   )

#+END_SRC

#+RESULTS:


#+BEGIN_SRC emacs-lisp

;; (use-package blacken
;;   :ensure t
;;   :diminish blacken-mode
;;   ;; :hook (python-mode . blacken-mode)
;;   :config
;;   ;; (setq blacken-line-length 100)
;;   :bind (('?\C-c ?\C-x ?a  . blacken-buffer)))

#+END_SRC

*** Stan

#+BEGIN_SRC emacs-lisp
;; Uncomment the line below if not required elsewhere.
;; (require 'use-package)

                                        ;stan-mode.el
(use-package stan-mode
  :straight
  (:host github :repo "stan-dev/stan-mode" :branch "master" :files ("stan-mode/stan-mode.el" "stan-mode/stan-keywords.el"))
  ;;  :ensure t
  :mode ("\\.stan\\'" . stan-mode)
  :hook (stan-mode . stan-mode-setup)

  :config
  ;; The officially recommended offset is 2.
  (setq stan-indentation-offset 2))


(use-package company-stan
  :ensure t
  :hook (stan-mode . company-stan-setup)
  ;;
  :config
  ;; Whether to use fuzzy matching in `company-stan'
  (setq company-stan-fuzzy t))


(use-package eldoc-stan
  :ensure t
  :hook (stan-mode . eldoc-stan-setup)
  ;;
  :config
  ;; No configuration options as of now.
  )


(use-package flycheck-stan
  ;; Add a hook to setup `flycheck-stan' upon `stan-mode' entry
  :ensure t
  :hook ((stan-mode . flycheck-stan-stanc2-setup)
         (stan-mode . flycheck-stan-stanc3-setup))
  :config
  ;; A string containing the name or the path of the stanc2 executable
  ;; If nil, defaults to `stanc2'
  (setq flycheck-stanc-executable nil)
  ;; A string containing the name or the path of the stanc2 executable
  ;; If nil, defaults to `stanc3'
  (setq flycheck-stanc3-executable nil))


(use-package stan-snippets
  :ensure t
  :hook (stan-mode . stan-snippets-initialize)
  ;;
  :config
  ;; No configuration options as of now.
  )

    ;;; ac-stan.el (Not on MELPA; Need manual installation)
;; (use-package ac-stan
;;   :load-path "path-to-your-directory/ac-stan/"
;;   ;; Delete the line below if using.
;;   :disabled t
;;   :hook (stan-mode . stan-ac-mode-setup)
;;   ;;
;;   :config
;;   ;; No configuration options as of now.
;;   )


;;   ;; No configuration options as of now.
;;   )


#+END_SRC

#+RESULTS:
: ((\.stan\' . stan-mode) (\.dockerfile\' . dockerfile-mode) (/Dockerfile\(?:\.[^/\]*\)?\' . dockerfile-mode) (\.md\' . markdown-mode) (\.tex\' . latex-mode) (\.yml$ . yaml-mode) (\.\(e?ya?\|ra\)ml\' . yaml-mode) (/git-rebase-todo\' . git-rebase-mode) (\.\(?:md\|markdown\|mkd\|mdown\|mkdn\|mdwn\)\' . markdown-mode) (\.hva\' . latex-mode) (\.envrc\' . direnv-envrc-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Brew\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.m\' . octave-maybe-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.webp\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.dir-locals\(?:-2\)?\.el\' . lisp-data-mode) (eww-bookmarks\' . lisp-data-mode) (tramp\' . lisp-data-mode) (/archive-contents\' . lisp-data-mode) (places\' . lisp-data-mode) (\.emacs-places\' . lisp-data-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-bsdmake-mode) (\.make\' . makefile-bsdmake-mode) (GNUmakefile\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-bsdmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (/PKGBUILD\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\(acinclude\|aclocal\|acsite\)\.m4\' . autoconf-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|squashfs\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\|SQUASHFS\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.js[mx]?\' . javascript-mode) (\.har\' . javascript-mode) (\.json\' . javascript-mode) (\.[ds]?va?h?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) (\.erts\' . erts-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|DVI\|OD[FGPST]\|DOCX\|XLSX?\|PPTX?\|pdf\|djvu\|dvi\|od[fgpst]\|docx\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (/\.\(authinfo\|netrc\)\' . authinfo-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (/\.redshift\.conf\' . conf-windows-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.\(?:asound\|enigma\|fetchmail\|gltron\|gtk\|hxplayer\|mairix\|mbsync\|msmtp\|net\|neverball\|nvidia-settings-\|offlineimap\|qt/.+\|realplayer\|reportbug\|rtorrent\.\|screen\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|mpdconf\|notmuch-config\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.art\' . image-mode) (\.avs\' . image-mode) (\.bmp\' . image-mode) (\.cmyk\' . image-mode) (\.cmyka\' . image-mode) (\.crw\' . image-mode) (\.dcr\' . image-mode) (\.dcx\' . image-mode) (\.dng\' . image-mode) (\.dpx\' . image-mode) (\.fax\' . image-mode) (\.heic\' . image-mode) (\.hrz\' . image-mode) (\.icb\' . image-mode) (\.icc\' . image-mode) (\.icm\' . image-mode) (\.ico\' . image-mode) (\.icon\' . image-mode) (\.jbg\' . image-mode) (\.jbig\' . image-mode) (\.jng\' . image-mode) (\.jnx\' . image-mode) (\.miff\' . image-mode) (\.mng\' . image-mode) (\.mvg\' . image-mode) (\.otb\' . image-mode) (\.p7\' . image-mode) (\.pcx\' . image-mode) (\.pdb\' . image-mode) (\.pfa\' . image-mode) (\.pfb\' . image-mode) (\.picon\' . image-mode) (\.pict\' . image-mode) (\.rgb\' . image-mode) (\.rgba\' . image-mode) (\.tga\' . image-mode) (\.wbmp\' . image-mode) (\.webp\' . image-mode) (\.wmf\' . image-mode) (\.wpg\' . image-mode) (\.xcf\' . image-mode) (\.xmp\' . image-mode) (\.xwd\' . image-mode) (\.yuv\' . image-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode) (\.drv\' . latex-mode))

*** Jupyter

#+begin_src emacs-lisp
;; (use-package jupyter
;;   :ensure t
;;   :defer t
;;   :after org
;;   :init
;;   (setq org-babel-default-header-args:jupyter-python '((:async . "yes")
;;                                                        (:session . "py")
;;                                                        (:kernel . "python3")))
;;   (add-to-list 'org-structure-template-alist '("j" . "src jupyter-python"))

;;   ;; function to load jupyter package and get kernelspecs from current python env
;;   (defun my/get-jupyter-aliases ()
;;     (require 'jupyter)
;;     (org-babel-jupyter-aliases-from-kernelspecs))

;;   :bind (:map jupyter-org-interaction-mode-map ("C-c h" . nil))

;;   :hook ((pyvenv-workon . my/get-jupyter-aliases)
;;         (pyvenv-deactivate . my/get/jupyter-aliases)))
#+end_src

#+RESULTS:

#+begin_src emacs-lisp
;; (use-package ox-ipynb
;; ;  :straight (ox-ipynb :type git :host github :repo "jkitchin/ox-ipynb")
;;   :ensure t
;;   :defer t
;;   :after org
;;   :hook (org-mode . (lambda () (require 'ox-ipynb))))
#+end_src

#+RESULTS:

*** Julia
#+begin_src emacs-lisp
(use-package julia-mode
  :ensure t
  )

(use-package lsp-julia
  :config
  (setq lsp-julia-default-environment "~/.julia/environments/v1.7"))

#+end_src

#+RESULTS:
: t

*** YAML
#+BEGIN_SRC emacs-lisp

(use-package yaml-mode
  :ensure t
  :mode ("\\.yml$" . yaml-mode)
  )
#+END_SRC
*** LaTeX and org-mode LaTeX export
#+begin_src emacs-lisp
(use-package auctex
  :defer t
  :ensure t)


(use-package reftex
  :defer t
  :ensure t)



(use-package latex
  :straight (:type built-in)                           ; nil
  :mode
  ("\\.tex\\'" . latex-mode)
  :bind
  (:map LaTeX-mode-map
        ("M-<delete>" . TeX-remove-macro)
        ("C-c C-r" . reftex-query-replace-document)
        ("C-c C-g" . reftex-grep-document))
  :init


  :config

  (setq-default TeX-master nil ; by each new fie AUCTEX will ask for a master fie.
                TeX-PDF-mode t
                TeX-engine 'xetex)     ; optional
  (auto-fill-mode 1)
  (setq TeX-auto-save t
        TeX-save-query nil       ; don't prompt for saving the .tex file
        TeX-parse-self t
        TeX-show-compilation nil         ; if `t`, automatically shows compilation log
        LaTeX-babel-hyphen nil ; Disable language-specific hyphen insertion.
        ;; `"` expands into csquotes macros (for this to work, babel pkg must be loaded after csquotes pkg).
        LaTeX-csquotes-close-quote "}"
        LaTeX-csquotes-open-quote "\\enquote{"
        TeX-file-extensions '("Rnw" "rnw" "Snw" "snw" "tex" "sty" "cls" "ltx" "texi" "texinfo" "dtx"))


  (setq reftex-plug-into-AUCTeX t)
  (setq reftex-default-bibliography '("/Users/jburgess/Documents/complete_bib.bib"))

  (add-to-list 'safe-local-variable-values
               '(TeX-command-extra-options . "-shell-escape"))

  ;; Font-lock for AuCTeX
  ;; Note: '«' and '»' is by pressing 'C-x 8 <' and 'C-x 8 >', respectively
  (font-lock-add-keywords 'latex-mode (list (list "\\(«\\(.+?\\|\n\\)\\)\\(+?\\)\\(»\\)" '(1 'font-latex-string-face t) '(2 'font-latex-string-face t) '(3 'font-latex-string-face t))))
  ;; Add standard Sweave file extensions to the list of files recognized  by AuCTeX.
  (add-hook 'TeX-mode-hook (lambda () (reftex-isearch-minor-mode)))
  (add-hook 'LaTeX-mode-hook #'TeX-fold-mode) ;; Automatically activate TeX-fold-mode.
  (add-hook 'LaTeX-mode-hook 'TeX-fold-buffer t)

  :hook (

         (LaTeX-mode . reftex-mode)
         (LaTeX-mode . visual-line-mode)
         (LaTeX-mode . flyspell-mode)
         (LaTeX-mode . LaTeX-math-mode)
         (LaTeX-mode . turn-on-reftex)

         )
  )



#+end_src

#+RESULTS:

*** markdown
#+begin_src emacs-lisp
(use-package markdown-mode
  :straight t
  :mode "\\.md\\'"
  :config
  (setq markdown-command "marked")
  (defun dw/set-markdown-header-font-sizes ()
    (dolist (face '((markdown-header-face-1 . 1.2)
                    (markdown-header-face-2 . 1.1)
                    (markdown-header-face-3 . 1.0)
                    (markdown-header-face-4 . 1.0)
                    (markdown-header-face-5 . 1.0)))
      (set-face-attribute (car face) nil :weight 'normal :height (cdr face))))

  (defun dw/markdown-mode-hook ()
    (dw/set-markdown-header-font-sizes))

  (add-hook 'markdown-mode-hook 'dw/markdown-mode-hook))
#+end_src
*** Docker

#+begin_src emacs-lisp
(use-package dockerfile-mode
  :defer t
  :straight
  (:host github :repo "spotify/dockerfile-mode" :branch "master" :files ("*.el" "out"))

  :config

  (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))


  )



(use-package docker-compose-mode
  :ensure t

  )

#+end_src


* Writing and Focus
** secret
#+begin_src emacs-lisp
(use-package secret-mode
  :straight
  (:host github :repo "bkaestner/secret-mode.el" :branch "main" :files ("*.el"))
  )


(global-set-key [f2] 'secret-mode)
#+end_src

#+RESULTS:

** Darkroom

#+BEGIN_SRC emacs-lisp
(use-package darkroom
  :ensure t
  :commands darkroom-mode
  :defer t
  :config
  (setq darkroom-text-scale-increase 0))

#+END_SRC

** Focus
#+BEGIN_SRC emacs-lisp
(use-package focus
  :ensure t
  :defer t
  )
#+END_SRC
* Addons
** Telegram
#+BEGIN_SRC emacs-lisp

(use-package tracking
  :defer t
  :config
  (setq tracking-faces-priorities '(all-the-icons-pink
                                    all-the-icons-lgreen
                                    all-the-icons-lblue))
  (setq tracking-frame-behavior nil))

(use-package visual-fill-column
  :ensure t
  )

(use-package rainbow-identifiers
  :ensure t
  )




;; Add faces for specific people in the modeline.  There must
;; be a better way to do this.
(defun dw/around-tracking-add-buffer (original-func buffer &optional faces)
  (let* ((name (buffer-name buffer))
         (face (cond ((s-contains? "Francesca" name) '(all-the-icons-pink))
                     ((s-contains? "Thomas" name) '(all-the-icons-lgreen))
                     ((s-contains? "Anastasia" name) '(all-the-icons-lblue))))
         (result (apply original-func buffer (list face))))
                                        ;(dw/update-polybar-telegram)
    result))

(defun dw/after-tracking-remove-buffer (buffer)
  (dw/update-polybar-telegram))

(advice-add 'tracking-add-buffer :around #'dw/around-tracking-add-buffer)
                                        ;(advice-add 'tracking-remove-buffer :after #'dw/after-tracking-remove-buffer)
(advice-remove 'tracking-remove-buffer #'dw/around-tracking-remove-buffer)


(use-package telega
  :commands telega
  :config
  (setq telega-user-use-avatars t
        telega-use-tracking-for '(any pin unread)
        telega-chat-use-markdown-formatting t
        telega-emoji-use-images t
        telega-msg-rainbow-title t
        telega-chat-fill-column 75))

(global-set-key [f1] 'telega)

#+END_SRC

#+RESULTS:
: t

** elfeed

#+begin_src emacs-lisp
(use-package elfeed-org
  :ensure t
  :config
  (elfeed-org)
  (setq rmh-elfeed-org-files (list "~/org/rss.org"))
  )




(defun concatenate-authors (authors-list)
  "Given AUTHORS-LIST, list of plists; return string of all authors
concatenated."
  (mapconcat
   (lambda (author) (plist-get author :name))
   authors-list ", "))

(defun my-search-print-fn (entry)
  "Print ENTRY to the buffer."
  (let* ((date (elfeed-search-format-date (elfeed-entry-date entry)))
         (title (or (elfeed-meta entry :title)
                    (elfeed-entry-title entry) ""))
         (title-faces (elfeed-search--faces (elfeed-entry-tags entry)))
         (feed (elfeed-entry-feed entry))
         (feed-title
          (when feed
            (or (elfeed-meta feed :title) (elfeed-feed-title feed))))
         (entry-authors (concatenate-authors
                         (elfeed-meta entry :authors)))
         (tags (mapcar #'symbol-name (elfeed-entry-tags entry)))
         (tags-str (mapconcat
                    (lambda (s) (propertize s 'face
                                            'elfeed-search-tag-face))
                    tags ","))
         (title-width (- (window-width) 5
                         elfeed-search-trailing-width))
         (title-column (elfeed-format-column
                        title (elfeed-clamp
                               elfeed-search-title-min-width
                               title-width
                               elfeed-search-title-max-width)
                        :left))
         (authors-width 80)
         (authors-column (elfeed-format-column
                          entry-authors (elfeed-clamp
                                         elfeed-search-title-min-width
                                         authors-width
                                         130)
                          :left)))

    (insert (propertize date 'face 'elfeed-search-date-face) " ")

    (insert (propertize title-column
                        'face title-faces 'kbd-help title) " ")

    (insert (propertize authors-column
                        'face 'elfeed-search-date-face
                        'kbd-help entry-authors) " ")

    ;; (when feed-title
    ;;   (insert (propertize entry-authors
    ;; 'face 'elfeed-search-feed-face) " "))

    (when entry-authors
      (insert (propertize feed-title
                          'face 'elfeed-search-feed-face) " "))

    ;; (when tags
    ;;   (insert "(" tags-str ")"))

    )
  )



(use-package elfeed
  :ensure t
  :config
  ;;  (global-set-key (kbd "C-x w") 'elfeed)


  (setq elfeed-search-print-entry-function #'my-search-print-fn)

  )


(use-package elfeed-score
  :ensure t
  :config
  (progn
    (elfeed-score-enable)
    (define-key elfeed-search-mode-map "=" elfeed-score-map))

  (setq   elfeed-score-serde-score-file "~/dotfiles/emacs/.config/emacs/elfeed.score")

  )

#+end_src

#+RESULTS:
: t

** Apple Music
#+begin_src emacs-lisp

(defun musica-index ()
  "Indexes Music's tracks in two stages:
1. Generates \"Tracks.sqlite\" using pytunes (needs https://github.com/hile/pytunes installed).
2. Caches an index at ~/.emacs.d/.musica.el."
  (interactive)
  (message "Indexing music... started")
  (let* ((now (current-time))
         (name "Music indexing")
         (buffer (get-buffer-create (format "*%s*" name))))
    (with-current-buffer buffer
      (delete-region (point-min)
                     (point-max)))
    (set-process-sentinel
     (start-process name
                    buffer
                    (file-truename (expand-file-name invocation-name
                                                     invocation-directory))
                    "--quick" "--batch" "--eval"
                    (prin1-to-string
                     `(progn
                        (interactive)
                        (require 'cl-lib)
                        (require 'seq)
                        (require 'map)

                        (message "Generating Tracks.sqlite...")
                        (process-lines "pytunes" "update-index") ;; Generates Tracks.sqlite
                        (message "Generating Tracks.sqlite... done")

                        (defun parse-tags (path)
                          (with-temp-buffer
                            (if (eq 0 (call-process "ffprobe" nil t nil "-v" "quiet"
                                                    "-print_format" "json" "-show_format" path))
                                (map-elt (json-parse-string (buffer-string)
                                                            :object-type 'alist)
                                         'format)
                              (message "Warning: Couldn't read track metadata for %s" path)
                              (message "%s" (buffer-string))
                              (list (cons 'filename path)))))

                        (let* ((paths (process-lines "sqlite3"
                                                     (concat (expand-file-name "~/")
                                                             "Music/Music/Music Library.musiclibrary/Tracks.sqlite")
                                                     "select path from tracks"))
                               (total (length paths))
                               (n 0)
                               (records (seq-map (lambda (path)
                                                   (let ((tags (parse-tags path)))
                                                     (message "%d/%d %s" (setq n (1+ n))
                                                              total (or (map-elt (map-elt tags 'tags) 'title) "No title"))
                                                     tags))
                                                 paths)))
                          (with-temp-buffer
                            (prin1 records (current-buffer))
                            (write-file "~/.config/emacs/.musica.el" nil))))))
     (lambda (process state)
       (if (= (process-exit-status process) 0)
           (message "Indexing music... finished (%.3fs)"
                    (float-time (time-subtract (current-time) now)))
         (message "Indexing music... failed, see %s" buffer))))))


(defun musica-search ()
  (interactive)
  (cl-assert (executable-find "pytunes") nil "pytunes not installed")
  (let* ((c1-width (round (* (- (window-width) 9) 0.4)))
         (c2-width (round (* (- (window-width) 9) 0.3)))
         (c3-width (- (window-width) 9 c1-width c2-width)))
    (ivy-read "Play: " (mapcar
                        (lambda (track)
                          (let-alist track
                            (cons (format "%s   %s   %s"
                                          (truncate-string-to-width
                                           (or .tags.title
                                               (file-name-base .filename)
                                               "No title") c1-width nil ?\s "…")
                                          (truncate-string-to-width (propertize (or .tags.artist "")
                                                                                'face '(:foreground "yellow")) c2-width nil ?\s "…")
                                          (truncate-string-to-width
                                           (propertize (or .tags.album "")
                                                       'face '(:foreground "cyan1")) c3-width nil ?\s "…"))
                                  track)))
                        (musica--index))
              :action (lambda (selection)
                        (let-alist (cdr selection)
                          (process-lines "pytunes" "play" .filename)
                          (message "Playing: %s [%s] %s"
                                   (or .tags.title
                                       (file-name-base .filename)
                                       "No title")
                                   (or .tags.artist
                                       "No artist")
                                   (or .tags.album
                                       "No album")))))))

(defun musica--index ()
  (with-temp-buffer
    (insert-file-contents "~/.config/emacs/.musica.el")
    (read (current-buffer))))


(defun musica-info ()
  (interactive)
  (let ((raw (process-lines "pytunes" "info")))
    (message "%s [%s] %s"
             (string-trim (string-remove-prefix "Title" (nth 3 raw)))
             (string-trim (string-remove-prefix "Artist" (nth 1 raw)))
             (string-trim (string-remove-prefix "Album" (nth 2 raw))))))

(defun musica-play-pause ()
  (interactive)
  (cl-assert (executable-find "pytunes") nil "pytunes not installed")
  (process-lines "pytunes" "play")
  (musica-info))

(defun musica-play-next ()
  (interactive)
  (cl-assert (executable-find "pytunes") nil "pytunes not installed")
  (process-lines "pytunes" "next"))

(defun musica-play-next-random ()
  (interactive)
  (cl-assert (executable-find "pytunes") nil "pytunes not installed")
  (process-lines "pytunes" "shuffle" "enable")
  (let-alist (seq-random-elt (musica--index))
    (process-lines "pytunes" "play" .filename))
  (musica-info))

(defun musica-play-previous ()
  (interactive)
  (cl-assert (executable-find "pytunes") nil "pytunes not installed")
  (process-lines "pytunes" "previous"))


#+end_src

#+RESULTS:
: musica-play-previous
